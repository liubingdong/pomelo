#!/usr/bin/python
# -*- coding: UTF-8 -*-
import argparse
import sys
import os
parser = argparse.ArgumentParser(prog='filter_host.py',

    description='''\
      --------------------------------------------------------------------------------
      filter_host.py is designed to 
      filter host gene sequences according to list generated by bmtagger.
      It may cause unexpected problems and user could contact me by 382983280@qq.com.
      --------------------------------------------------------------------------------
                ''',
    epilog='''
Usage:
filter_host.py -i samples.fastq -t bmtagger.list -f fastq -o clean > sequence.fasq
''', formatter_class=argparse.RawDescriptionHelpFormatter)


parser.add_argument('-i', '--input', required=True, type=str,
                    help='Input sample fastq which you want to filter.')

parser.add_argument('-t', '--to', required=True, type=str,
                    help='bmtagger.list which list the host sequence ID.')
parser.add_argument('-f', '--format', metavar='fastq/fasta', required=True, type=str,
                    help='define the input format.')
parser.add_argument('-o', '--output', metavar='clean/host', required=True, type=str,
                    help='--output clean, it means script will output the sample sequence without host sequence.'+
                    '--output host, it means script will output the sample sequence without host sequence.')

def main():
    args = parser.parse_args()
    if args.format == 'fastq':
      var=4
    elif args.format == 'fasta':
      var=2
    else: 
      print '--format only allow two option fastq/fasta'   
    if args.output == 'clean':
    	human={}
    	for line in open(args.to):
    	        human[line.strip()]=None
    	skip=False
    	for i, line in enumerate(open(args.input)):
    	        if i%var==0:
    	                if line[1:].split("/")[0].split()[0] in human: skip=True
    	                else: skip=False

    	        if skip==False: print line.rstrip()
    elif args.output == 'host':
      human={}
      for line in open(args.to):
              human[line.strip()]=None
      skip=True
      for i, line in enumerate(open(args.input)):
              if i%var==0:
                      if line[1:].split("/")[0].split()[0] in human: skip=False
                      else: skip=True

              if skip==False: print line.rstrip()
    else:
      print '--output only allow two option clean/host'     

if __name__ == "__main__":
    main()
