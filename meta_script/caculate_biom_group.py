#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import pandas as pd
import os
import argparse

parser = argparse.ArgumentParser(prog='caculate_biom_group.py',
    description='''\
      --------------------------------------------------------------------------------
      caculate_biom_group.py is designed to 
      caculate and add group mean value in the biom tsv for krona plot.
      It may cause unexpected problems and user could contact me by 382983280@qq.com.
      --------------------------------------------------------------------------------
                ''',    
    epilog='''
Usage:
caculate_biom_group.py -i tax.tsv -m mapping file -o krona_pre.tsv

''', formatter_class=argparse.RawDescriptionHelpFormatter)



parser.add_argument('-i', '--input', required=True, type=str,
                    help='Input file generated by biom convert -i biom -o table.txt --to-tsv --header-key taxonomy')
parser.add_argument('-m', '--mapping', required=True, type=str,
                    help='mapping files including Group information')
parser.add_argument('-o', '--output', required=True, type=str,
                    help='Output file')

def main ():
  args = parser.parse_args()
  data=pd.read_csv(args.input,header=1,sep='\t')
  mapping=pd.read_csv(args.mapping,header=0,sep='\t')
  group_name=mapping['Group'].unique()
  for i in group_name:
    sub_mapping=mapping.loc[mapping["Group"] == i]
    try:
      sub_samples=sub_mapping['#SampleID']
    except:
      sub_samples=sub_mapping['SampleID']
    sub_data=data.loc[:,sub_samples]
    data.insert(data.shape[1]-1,i,sub_data.mean(axis=1))
  data=data.drop(['#OTU ID'],axis=1)
  for i in data.columns[:-1]:
    data[i]=data[i].astype("int")
  data.to_csv(args.output,sep='\t',index=False)  

if __name__ == "__main__":
    main()



















